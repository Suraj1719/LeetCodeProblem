There are n rooms labeled from 0 to n - 1 and all the rooms are locked except for room 0. Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key.

When you visit a room, you may find a set of distinct keys in it. Each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms.

Given an array rooms where rooms[i] is the set of keys that you can obtain if you visited room i, return true if you can visit all the rooms, or false otherwise.

 

Example 1:

Input: rooms = [[1],[2],[3],[]]
Output: true
Explanation: 
We visit room 0 and pick up key 1.
We then visit room 1 and pick up key 2.
We then visit room 2 and pick up key 3.
We then visit room 3.
Since we were able to visit every room, we return true.
Example 2:

Input: rooms = [[1,3],[3,0,1],[2],[0]]
Output: false
Explanation: We can not enter room number 2 since the only key that unlocks it is in that room.
 

Constraints:

n == rooms.length
2 <= n <= 1000
0 <= rooms[i].length <= 1000
1 <= sum(rooms[i].length) <= 3000
0 <= rooms[i][j] < n
All the values of rooms[i] are unique.



//wrong approach

// Set<Integer> key=new HashSet<>();
        // key.add(0);
        // int flag=1;
        // for(int i=0;i<rooms.size();i++){
        //     List<Integer> room=rooms.get(i);
        //     if(key.contains(i)){
        //         for(int x:room)
        //             key.add(x);
        //     }
        //     else{
        //         flag=0;
        //         break;
        //     }
        // }
        // if(flag==0)
        //     return false;
        // else 
        //     return true;
        
        
        
        //time complexity : O(n+m)
//approach -1 (using bfs traversal)
class Solution {
    public boolean canVisitAllRooms(List<List<Integer>> rooms) {
      

        Queue<Integer> key=new LinkedList<>();
        boolean vis[]=new boolean[rooms.size()+1];
        key.add(0);
        vis[0]=true;
        int count=1;
        while(!key.isEmpty() && count<rooms.size()){
            int cur_key=key.poll();

            for(int x:rooms.get(cur_key)){
                if(vis[x]==true)
                    continue;
                else{
                    key.add(x);
                    vis[x]=true;
                    count++;
                }

            }
            if(key.isEmpty())
               break;
        }
        if(count==rooms.size())
            return true;
        else
            return false;

    }
}

//approach - 2(using dfs traversal)
class Solution {
    public boolean canVisitAllRooms(List<List<Integer>> rooms) {
        int n=rooms.size();

        boolean vis[]=new boolean[n];
        dfs(rooms,0,vis);
        for(int i=0;i<n;i++){
            if(vis[i]==false)
            return false;
        }
        return true;
    }
    void dfs(List<List<Integer>> rooms,int room_key,boolean vis[]){
        vis[room_key]=true;

        for(int key:rooms.get(room_key)){
            if(vis[key]==false){
                dfs(rooms,key,vis);
            }
        }


    }
}
