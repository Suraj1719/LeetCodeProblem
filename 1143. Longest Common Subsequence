Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

 

Example 1:

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.
Example 2:

Input: text1 = "abc", text2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.
Example 3:

Input: text1 = "abc", text2 = "def"
Output: 0
Explanation: There is no such common subsequence, so the result is 0.
 

Constraints:

1 <= text1.length, text2.length <= 1000
text1 and text2 consist of only lowercase English characters.

//approach (brute force using recursion only )
//gives tle
//time complexity : O(2^n * 2^m)

class Solution {
    int n,m;

    int solve(String s1,String s2,int i,int j){//recursion
    if(i>=n || j>=m)
    return 0;
    if(s1.charAt(i)==s2.charAt(j))
    return 1+solve(s1,s2,i+1,j+1);
    else
    //we two choice either we take cur ch of 1st and remove cur ch of sec
    //or we remove cur ch of 1st and take cur ch of sec
    return Math.max(solve(s1,s2,i+1,j),solve(s1,s2,i,j+1));

    }
    public int longestCommonSubsequence(String text1, String text2) {
        n=text1.length();
        m=text2.length();
        return solve(text1,text2,0,0);
    }
}

//approach-2(use dp of memoization on recursion )

//time complexity : O(n*m)
//space : O(n*m)

class Solution {
    int n,m;
    int dp[][]=new int[1001][1001];

    int solve(String s1,String s2,int i,int j){//recursion

    if(i>=n || j>=m)
    return 0;

    if(dp[i][j]!=-1)
    return dp[i][j];

    if(s1.charAt(i)==s2.charAt(j))
    return dp[i][j]=1+solve(s1,s2,i+1,j+1);
    else
    //we two choice either we take cur ch of 1st and remove cur ch of sec
    //or we remove cur ch of 1st and take cur ch of sec
    return dp[i][j]=Math.max(solve(s1,s2,i+1,j),solve(s1,s2,i,j+1));

    }
    public int longestCommonSubsequence(String text1, String text2) {
        n=text1.length();
        m=text2.length();
        for(int i=0;i<1001;i++){
            for(int j=0;j<1001;j++){
                dp[i][j]=-1;
            }
        }
        return solve(text1,text2,0,0);
    }
}
//approach -3(bottom up approach )
//time complexity : O(n*m)
//space : O(n*m)
class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int n=text1.length();
        int m=text2.length();
        int ans[][]=new int[n+1][m+1];
        //first row and col will be zero
        for(int i=0;i<=n;i++)
        ans[i][0]=0;
        for(int i=0;i<=m;i++)
        ans[0][i]=0;

        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(text1.charAt(i-1)==text2.charAt(j-1)){
                    ans[i][j]=1+ans[i-1][j-1];
                }else{
                    ans[i][j]=Math.max(ans[i-1][j],ans[i][j-1]);
                }
            }
        }
        return ans[n][m];
    }
}
