Given an m x n grid of characters board and a string word, return true if word exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring.
The same letter cell may not be used more than once.

//backtracking code in java
class Solution {
    int dir[][]={{1,0},{-1,0},{0,1},{0,-1}};
    public boolean exist(char[][] board, String word) {
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                if(board[i][j]==word.charAt(0) && findWord(i,j,0,word,board))
                    return true;
            }
        }
        return false;
    }
    public boolean findWord(int x,int y,int idx,String w,char [][]b){
        if(idx==w.length())
            return true;
        if(x<0 || y<0 || x>=b.length || y>=b[0].length || b[x][y]=='*')
            return false;
        if(b[x][y]!=w.charAt(idx))
            return false;
        
        char temp=b[x][y];
        b[x][y]='*';
        for(int d[]:dir){
            int dx=x+d[0];
            int dy=y+d[1];
            if(findWord(dx,dy,idx+1,w,b))
                return true;
        }
        b[x][y]=temp;
        
        return false;
        
    }
}
