//very important asked in Amazon ,Microsoft , Meta , Apple , Salsforce etc

You are given an m x n integer array grid where grid[i][j] could be:

1 representing the starting square. There is exactly one starting square.
2 representing the ending square. There is exactly one ending square.
0 representing empty squares we can walk over.
-1 representing obstacles that we cannot walk over.
Return the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.

 

Example 1:
Input: grid = [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]
Output: 2
Explanation: We have the following two paths: 
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)
2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)
Example 2:
Input: grid = [[1,0,0,0],[0,0,0,0],[0,0,0,2]]
Output: 4
Explanation: We have the following four paths: 
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)
2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)
3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)
4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)

//code 

class Solution {
    //backtracking clasic problem
    //time complexity : O(3^(m*n))
    int no_nonObs=0;
    int ans=0;
    int dir_x[]={1,0,-1,0};
    int dir_y[]={0,1,0,-1};
    public int uniquePathsIII(int[][] grid) {
        //count number of nonobstacle that is empty spaces
        int start_x=-1;
        int start_y=-1;
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]==0 || grid[i][j]==1)//we also consider starting point
                no_nonObs++;
                if(grid[i][j]==1){
                    start_x=i;
                    start_y=j; 
                }
            }
        }
        int cur_obs=0;
        backT(grid,cur_obs,start_x,start_y);
        return ans;
    }
    void backT(int[][] grid,int count,int i,int j){
        //exception
        if(i<0 || i>=grid.length || j<0 || j>=grid[0].length || grid[i][j]==-1)
        return;

        if(grid[i][j]==2){
            if(count==no_nonObs)
                ans++;
                return;
            
        }
        //we donot want to visit cur position repeatedly, so we mark it visited
        
        grid[i][j]=-1;//we can also create a vis 2-D array to store visited position
        for(int k=0;k<4;k++){
            int new_i=i+dir_x[k];
            int new_j=j+dir_y[k];
            backT(grid,count+1,new_i,new_j);//we move to near possible step and also 
            //incrementing countint of step
        }
        //backtrack to explore all possible path
        grid[i][j]=0;
    }
}
