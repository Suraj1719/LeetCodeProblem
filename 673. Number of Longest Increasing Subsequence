Given an integer array nums, return the number of longest increasing subsequences.

Notice that the sequence has to be strictly increasing.

 

Example 1:

Input: nums = [1,3,5,4,7]
Output: 2
Explanation: The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7].
Example 2:

Input: nums = [2,2,2,2,2]
Output: 5
Explanation: The length of the longest increasing subsequence is 1, and there are 5 increasing subsequences of length 1, so output 5.

Constraints:

1 <= nums.length <= 2000
-106 <= nums[i] <= 106

Intution : as single element is also a subsequnce of length 1 ,so we create two array where we store the max length of we can achive till curent sub sequence and
in count array we store number of maximum length we can achive . At end we can count all maximum length of subarray and return the ans .

code : -

time complexity : O(n^2)

class Solution {
    public int findNumberOfLIS(int[] nums) {
        int n=nums.length;
        int length[]=new int[n];
        int count[]=new int[n];
        Arrays.fill(length,1);
        Arrays.fill(count,1);//as single element is also a subsequenece of length 1

        int maxLen=1;
        for(int i=1;i<n;i++){
            for(int j=0;j<i;j++){
                if(nums[i]>nums[j]){
                    if(length[j]+1>length[i]){
                        length[i]=length[j]+1;
                        count[i]=count[j];
                    }else if(length[j]+1==length[i]){
                        count[i]+=count[j];
                    }
                }
            }
            maxLen=Math.max(maxLen,length[i]);
        }
        int result=0;
        for(int i=0;i<n;i++){
            if(length[i]==maxLen)
            result+=count[i];
        }
return result;
    }
}
