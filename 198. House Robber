You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.

 

Example 1:

Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.
Example 2:

Input: nums = [2,7,9,3,1]
Output: 12
Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
Total amount you can rob = 2 + 9 + 1 = 12.
 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 400

//approach-1( using  recursion  gives tle )
class Solution {
   
    public int rob(int[] nums) {
       
        int n=nums.length;
        return maxRob(nums,0);

    }
    public int maxRob(int nums[],int ind){
        if(ind>=nums.length)
        return 0;
    
    //we have two choice either we rob curent house or skip
    int skip=maxRob(nums,ind+1);
    int curRob=nums[ind]+maxRob(nums,ind+2);
return Math.max(skip,curRob);
  
    }
}
//approach-2(top -bottom approach  OR using dp and recursion)
class Solution {
    int dp[]=new int[101];
    public int rob(int[] nums) {
        Arrays.fill(dp,-1);
        int n=nums.length;

    return maxRob(nums,0);
        
    }
    public int maxRob(int nums[],int ind){
        if(ind>=nums.length)
        return 0;
    if(dp[ind]!=-1)
    return dp[ind];
    //we have two choice either we rob curent house or skip
    int skip=maxRob(nums,ind+1);
    int curRob=nums[ind]+maxRob(nums,ind+2);

    return dp[ind]=Math.max(skip,curRob);
    }
}
//approach-3 (bottom up approach)
class Solution {
    public int rob(int[] nums) {
        int n=nums.length;
        if(n==1)
        return nums[0];
        int ans[]=new int[n+1];
        //ans[i] : maximum stolen money till i house
        ans[0]=0;
        ans[1]=nums[0];
        for(int i=2;i<=n;i++){
            int stell=nums[i-1]+ans[i-2];
            int skip=ans[i-1];

            ans[i]=Math.max(stell,skip);

        }
        return ans[n];
    }
}
