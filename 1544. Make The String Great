approach-1(simple bruteforce )
Time complexity: O(n^2)O(n^2)

    as Each iteration for s takes O(n)  O(n) time.
   In the worst-case scenario, we can remove one pair in each iteration, there might be O(n)O(n) pairs.
   In summary, the time complexity is O(n^2)
Space complexity: O(n)
After we remove a pair, we concatenate the rest strings into a new string and start iterating again. Making copies of the rest of s requires O(n) space.
Therefore, the space complexity is O(n).

//code

class Solution {
    public String makeGood(String s) {
        StringBuilder newS = new StringBuilder(s);
        
        // if s has less than 2 characters, we just return itself.
        while (newS.length() > 1) {
            // 'find' records if we find any pair to remove.
            boolean find = false;
            
            // Check every two adjacent characters, currChar and nextChar.
            for (int i = 0; i < newS.length() - 1; ++i) {
                char currChar = newS.charAt(i), nextChar = newS.charAt(i + 1);
                
                // If they make a pair, remove them from 's' and let 'find = true'.
                if (Math.abs(currChar - nextChar) == 32) {
                    newS.deleteCharAt(i);
                    newS.deleteCharAt(i);
                    find = true;
                    break;
                }
            }
            
            // If we cannot find any pair to remove, break the loop. 
            if (!find)
                break;
        }
        return newS.toString();
    }
}

approach-2(recursive ) time :O(n^2) and space o(n^2)

class Solution {
    public String makeGood(String s) {
        // If we find a pair in 's', remove this pair from 's'
        // and solve the remaining string recursively.
        for (int i = 0; i < s.length() - 1; ++i) {
            if (Math.abs(s.charAt(i) - s.charAt(i + 1)) == 32)
                return makeGood(s.substring(0, i) + s.substring(i + 2));
        }

        // Base case, if we can't find a pair, just return 's'.
        return s;
    }
}


approach-3 (using stack)  time :O(n) and space o(n)


class Solution {
    public String makeGood(String s) {
        // Use stack to store the visited characters.
        Stack<Character> stack = new Stack<>();
        
        // Iterate over 's'.
        for (char currChar : s.toCharArray()) {
            // If the current character make a pair with the last character in the stack,
            // remove both of them. Otherwise, we the add current character to stack.
            if (!stack.isEmpty() && Math.abs(stack.lastElement() - currChar) == 32) 
                stack.pop();
            else
                stack.add(currChar);
        }
        
        // Returns the string concatenated by all characters left in the stack.
        StringBuilder ans = new StringBuilder();
        for (char currChar : stack) 
            ans.append(currChar);
        return ans.toString();
    }
}
