similar intution as  LC 106

//CODE
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int pre_order[];
    int in_order[];
    int pre_idx;
    Map<Integer,Integer>index=new HashMap<>();
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        this.pre_order=preorder;
        this.in_order=inorder;
        pre_idx=0;
        for(int i=0;i<inorder.length;i++){
            index.put(inorder[i],i);
        }
        return helper(0,inorder.length-1);

    }
    TreeNode helper(int l,int r){
        if(l>r)
        return null;

        int cur_root=pre_order[pre_idx];
        pre_idx++;
        TreeNode root=new TreeNode(cur_root);
        //divide inorder array into two array left and right which are going to represent 
        //respective sub tree according to cur root index

        int idx=index.get(cur_root);
        root.left=helper(l,idx-1);
        root.right=helper(idx+1,r);
        return root;
    }
}
