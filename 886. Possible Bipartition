We want to split a group of n people (labeled from 1 to n) into two groups of any size. Each person may dislike some other people, and they should not go into the same group.

Given the integer n and the array dislikes where dislikes[i] = [ai, bi] indicates that the person labeled ai does not like the person labeled bi, return true if it is possible to split everyone into two groups in this way.

 

Example 1:

Input: n = 4, dislikes = [[1,2],[1,3],[2,4]]
Output: true
Explanation: group1 [1,4] and group2 [2,3].
Example 2:

Input: n = 3, dislikes = [[1,2],[1,3],[2,3]]
Output: false
Example 3:

Input: n = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]
Output: false
 

Constraints:

1 <= n <= 2000
0 <= dislikes.length <= 104
dislikes[i].length == 2
1 <= dislikes[i][j] <= n
ai < bi
All the pairs of dislikes are unique.

//approach-1 (brute force )


//approach -2(using bfs traversal)


//Time complexity: O(N+E)
//space :  O(N+E)
class Solution {
    public boolean possibleBipartition(int n, int[][] dislikes) {
        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
        for(int i=0;i<=n;i++){
            adj.add(new ArrayList<>());
        }
        for(int []a:dislikes){
            int u=a[0];
            int v=a[1];
            adj.get(u).add(v);
            adj.get(v).add(u);
        }
        int color[]=new int[n+1];//visited
        Arrays.fill(color,-1);
        for(int i=1;i<=n;i++){
            if(color[i]==-1){
                if( bfsCheckBipartite(adj,i,color)==false)
                    return false;
            }
        }
        return true;
    }
    boolean bfsCheckBipartite(ArrayList<ArrayList<Integer>> adj,int cur,int c[]){
        Queue<Integer> q=new LinkedList<>();
        q.add(cur);
        c[cur]=1;
        while(!q.isEmpty()){
            int temp=q.poll();
            for(int neighbour:adj.get(temp)){
                if(c[neighbour]==c[temp])
                    return false;

                if(c[neighbour]==-1){
                    q.add(neighbour);
                    c[neighbour]=1-c[temp];//here we take colour as 1 and 0
                }
            }
        }
        return true;
    }
}

//approach-2(using dfs)

//Time complexity: O(N+E)
//space :  O(N+E)

class Solution {
    public boolean dfs(int node, int nodeColor, Map<Integer, List<Integer>> adj, int[] color) {
        color[node] = nodeColor;
        if (!adj.containsKey(node))
            return true;
        for (int neighbor : adj.get(node)) {
            if (color[neighbor] == color[node])
                return false;
            if (color[neighbor] == -1) {
                if (!dfs(neighbor, 1 - nodeColor, adj, color))
                    return false;
            }
        }
        return true;
    }

    public boolean possibleBipartition(int n, int[][] dislikes) {
        Map<Integer, List<Integer>> adj = new HashMap<>();
        for (int[] edge : dislikes) {
            int a = edge[0], b = edge[1];
            adj.computeIfAbsent(a, value -> new ArrayList<Integer>()).add(b);
            adj.computeIfAbsent(b, value -> new ArrayList<Integer>()).add(a);
        }
        int[] color = new int[n + 1];
        Arrays.fill(color, -1); // 0 stands for red and 1 stands for blue.

        for (int i = 1; i <= n; i++) {
            if (color[i] == -1) {
                // For each pending component, run DFS.
                if (!dfs(i, 0, adj, color))
                    // Return false, if there is conflict in the component.
                    return false;
            }
        }
        return true;
    }
}
