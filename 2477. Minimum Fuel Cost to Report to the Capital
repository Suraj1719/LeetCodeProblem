class Solution {
    private long ans=0;
    private int seats;
    public long minimumFuelCost(int[][] roads, int seats) {
        int n=roads.length;
        List<List<Integer>>adj=new ArrayList<>();
        //int n=roads.length;
        for(int i=0;i<=n;i++){
            adj.add(new ArrayList<>());
        }
        for(int a[]:roads){
            int u=a[0];
            int v=a[1];
            adj.get(u).add(v);
            adj.get(v).add(u);
        }
        this.seats=seats;
        dfs(0,-1,adj);//cur city, prev city, adjecency list
        return ans;
        
    }
    private int dfs(int curCity,int prevCity,List<List<Integer>>adj){
        int people=1;//as each city has one people
        for(int i=0;i<adj.get(curCity).size();i++){
            int nextCity=adj.get(curCity).get(i);
            if(nextCity==prevCity)
            continue;
            people+=dfs(nextCity,curCity,adj);
        }
        if(curCity!=0)
        ans+=(long)(Math.ceil((double)people/seats));
        return people;
    }
    
}
