Given the root of a binary tree, find the maximum value v for which there exist different nodes a and b where v = |a.val - b.val| and a is an ancestor of b.

A node a is an ancestor of b if either: any child of a is equal to b or any child of a is an ancestor of b.

Example 1:
Input: root = [8,3,10,1,6,null,14,null,null,4,7,13]
Output: 7
Explanation: We have various ancestor-node differences, some of which are given below :
|8 - 3| = 5
|3 - 7| = 4
|8 - 1| = 7
|10 - 13| = 3
Among all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7.

//brute forrce approach( time complexity - O(n^2) as every root repetedly called )
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int maxDiff;
    void findmaxDiffutill(TreeNode root,TreeNode child){
        if(child==null)
        return;

        maxDiff=Math.max(maxDiff,Math.abs(root.val-child.val));
        //recursive call
        findmaxDiffutill(root,child.left);
        findmaxDiffutill(root,child.right);
    }
    void findMaxDiff(TreeNode root){
        if(root==null)
        return;
        findmaxDiffutill(root,root.left);
        findmaxDiffutill(root,root.right);

        findMaxDiff(root.left);
        findMaxDiff(root.right);

    }
    public int maxAncestorDiff(TreeNode root) {
        maxDiff=-1;
        findMaxDiff(root);

        return maxDiff;
    }
}

//optimized approach( time complexity - O(n))
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxAncestorDiff(TreeNode root) {
        int minv=root.val;
        int maxv=root.val;

        return findMaxDiff(root,minv,maxv);         
    }
    int findMaxDiff(TreeNode root,int minv,int maxv){
        if(root==null){
            return Math.abs(maxv-minv);
        }
        minv=Math.min(minv,root.val);
        maxv=Math.max(maxv,root.val);

        int leftDiff=findMaxDiff(root.left,minv,maxv);
        int rightDiff=findMaxDiff(root.right,minv,maxv);

         return Math.max(leftDiff,rightDiff);
    }
}

