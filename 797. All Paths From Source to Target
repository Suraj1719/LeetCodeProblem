Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1 and return them in any order.

The graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]).

 

Example 1:
Input: graph = [[1,2],[3],[3],[]]
Output: [[0,1,3],[0,2,3]]
Explanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.

//code

class Solution {
    List<List<Integer>> ans;
    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
        ans=new ArrayList<>();
        List<Integer> res=new ArrayList<>();
        dfs(graph,0,graph.length-1,res);//source =0 , destination=size-1
        return ans;
    }
    
    //time complexity of dfs : O(V+E)
    
    void dfs(int[][] graph,int s,int d,List<Integer> res){
        res.add(s);
        if(s==d){
            ans.add(new ArrayList<>(res));//if we reach st destination
        }else{
            //we check for all posible forward move
            for(int node:graph[s]){
                dfs(graph,node,d,res);
            }

        }
        //backtrack to source for another path
        res.remove(res.size()-1);

    }
}
