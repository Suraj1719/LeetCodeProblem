Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.

A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or 
diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).

Input: matrix = [[2,1,3],[6,5,4],[7,8,9]]
Output: 13

ex-2
Input: matrix = [[-19,57],[-40,-5]]
Output: -59

Constraints:

n == matrix.length == matrix[i].length
1 <= n <= 100
-100 <= matrix[i][j] <= 100


//code (using recursion gives tle )

//time : O(3 power n^2)
//space : O(1)

class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int n=matrix.length;
        int result=Integer.MAX_VALUE;

        int row=0;

        for(int col=0;col<n;col++){
            result=Math.min(result,solve(matrix,row,col));

        }
        return result;
        
    }
    int solve(int [][]m,int r,int c){
        if(r==m.length-1)
        return m[r][c];

        int curSum=m[r][c];
        int curMin=Integer.MAX_VALUE;

        if(r+1<m.length && c-1>=0)
        curMin=Math.min(curMin,curSum+solve(m,r+1,c-1));
        if(r+1<m.length)
        curMin=Math.min(curMin,curSum+solve(m,r+1,c));
        if(r+1<m.length && c+1<m.length)
        curMin=Math.min(curMin,curSum+solve(m,r+1,c+1));

        return curMin;
    }
}

//aproach-2(optimised above using memoization of dp)

//time : O(3 power n^2)
//space : O(n^2)

class Solution {
    int dp[][]=new int[101][101];
    public int minFallingPathSum(int[][] matrix) {
        int n=matrix.length;
        int result=Integer.MAX_VALUE;
        for(int i=0;i<101;i++){
            for(int j=0;j<101;j++){
                dp[i][j]=-1;
            }
        }

        int row=0;

        for(int col=0;col<n;col++){
            result=Math.min(result,solve(matrix,row,col));

        }
        return result;
        
    }
    int solve(int [][]m,int r,int c){
        if(r==m.length-1)
        return m[r][c];

        if(dp[r][c]!=-1)
        return dp[r][c];

        int curSum=m[r][c];
        int curMin=Integer.MAX_VALUE;

        if(r+1<m.length && c-1>=0)
        curMin=Math.min(curMin,curSum+solve(m,r+1,c-1));
        if(r+1<m.length)
        curMin=Math.min(curMin,curSum+solve(m,r+1,c));
        if(r+1<m.length && c+1<m.length)
        curMin=Math.min(curMin,curSum+solve(m,r+1,c+1));

        return dp[r][c]=curMin;
    }
}
//approach -3 (simple matrix sum )

class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int n=matrix.length;
        int ans[][]=new int[n][n];
        //ans first row same as matrix first row
        for(int col=0;col<n;col++){
            ans[0][col]=matrix[0][col];
        }
        for(int row=1;row<n;row++){
            for(int col=0;col<n;col++){
            
                //minimum between above three possibilities of curent row
                //[row-1][col-1],-out of bound for col=0
                //[row-1][col] - safe
                //[row-1][col+1] - out of bound for col=n-1

                int a=Integer.MAX_VALUE;
                int b=Integer.MAX_VALUE;
                if(col-1>=0)
                a=ans[row-1][col-1];
                if(col+1<n)
                b=ans[row-1][col+1];

        ans[row][col]=matrix[row][col]+Math.min(ans[row-1][col],Math.min(a,b));
            }

        }
        int res=Integer.MAX_VALUE;
        for(int col=0;col<n;col++){
            res=Math.min(res,ans[n-1][col]);
        }
        return res;
    }
}
