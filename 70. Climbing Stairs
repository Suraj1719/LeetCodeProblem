You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

Constraints:

1 <= n <= 45

//approach-1(without using dp : only recursion gives TLE)
//time : O(2^n)
//space : O(1)
class Solution {
    public int climbStairs(int n) {
        int ans=0;
        ans=NumberOfWays(n);
        return ans;
    }
    int NumberOfWays(int n){
        if(n==1)
        return 1;
        if(n==2)
        return 2;

        return NumberOfWays(n-1)+NumberOfWays(n-2);
    }
}
//approach-2(using dp)
//time : O(n)
//space : O(n)
class Solution {
    public int climbStairs(int n) {
        int ans=0;
        int dp[]=new int[n+1];
        Arrays.fill(dp,-1);
        ans=NumberOfWays(n,dp);
        return ans;
    }
    int NumberOfWays(int n,int dp[]){
        if(n==1)
        return 1;
        if(n==2)
        return 2;
        if(dp[n]!=-1)
        return dp[n];

        return dp[n]=NumberOfWays(n-1,dp)+NumberOfWays(n-2,dp);
    }
}
//approach -3 (bottom up approach)
class Solution {
    public int climbStairs(int n) {
        if(n==1 || n==2)
        return n;
        int ans[]=new int[n+1];
        ans[0]=0;
        ans[1]=1;
        ans[2]=2;
        for(int i=3;i<=n;i++){
            ans[i]=ans[i-1]+ans[i-2];
        }
        return ans[n];

    }
}
